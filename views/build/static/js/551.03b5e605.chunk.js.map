{"version":3,"file":"static/js/551.03b5e605.chunk.js","mappings":"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","sources":["pages/AuthPage.tsx"],"sourcesContent":["import { Fragment, useState } from 'react'\nimport axios from 'axios'\nimport { Navigate, useNavigate } from 'react-router-dom'\nimport { FloatingLabel, Form } from 'react-bootstrap'\nimport Constants from '../constants/Constants'\nimport ReactIf from '../components/ReactIf'\nimport endPoints from '../constants/Endpoints'\n\nconst AuthPage = () => {\n    const [authstep, setAuthStep] = useState({ firststep: true, secondstep: false })\n    const [state, setState] = useState({ name: '', email: '', hash: '', otp: '', newuser: false })\n    const [alert, setAlert] = useState('')\n    const [isLoading, setLoading] = useState(false)\n    const navigate = useNavigate()\n\n    const generateAuthcode = async (event: any) => {\n        event.preventDefault()\n        setAlert(Constants.AuthMessage)\n        setLoading(true)\n\n        try {\n            const response = await axios.post(endPoints.generateAuthCodeEndpoint, state)\n            setState({ ...state, hash: response.data.hash, newuser: response.data.newuser })\n            setAlert(response.data.msg)\n            setAuthStep({ firststep: false, secondstep: true })\n            setLoading(false)\n        }\n\n        catch (error) {\n            setAlert(Constants.ConnectionErrorMessage)\n            setLoading(false)\n        }\n    }\n\n    const verifyAuthcode = async (event: any) => {\n        event.preventDefault()\n        setAlert(Constants.AuthMessage)\n        setLoading(true)\n\n        try {\n            const response = await axios.post(endPoints.verifyAuthCodeEndpoint, state)\n            axios.defaults.headers.common['Authorization'] = `Bearer ${response.data.accessToken}`\n            localStorage.setItem('accessToken', response.data.accessToken)\n            setAlert('Successfully authenticated')\n            setLoading(false)\n            navigate('/dataset/library')\n        }\n\n        catch (error: any) {\n            if (error.response) {\n                setAlert(error.response.data.msg)\n                setLoading(false)\n            }\n\n            else {\n                setAlert(Constants.ConnectionErrorMessage)\n                setLoading(false)\n            }\n        }\n    }\n\n    return (\n        <Fragment>\n            <ReactIf condition={localStorage.hasOwnProperty('accessToken')}>\n                <Navigate replace to='/dataset/library' />\n            </ReactIf>\n            <ReactIf condition={!localStorage.hasOwnProperty('accessToken')}>\n                <ReactIf condition={authstep.firststep}>\n                    <form className='box' onSubmit={generateAuthcode}>\n                        <p className='branding'>Lenstack Auth</p>\n                        <p className='boxtext'>Enter the email address where you can be contacted. This email address will be used for authentication.</p>\n                        <FloatingLabel controlId='floatingEmail' label='Your Email'>\n                            <Form.Control autoFocus type='email' placeholder='Your Email' onChange={(e) => setState({ ...state, email: e.target.value })} required autoComplete={'off'} minLength={4} maxLength={40} />\n                        </FloatingLabel>\n                        <p id='alert'>{alert}</p>\n                        <button type='submit' className='mt-2 btn btnbox'>Continue to Lenstack {isLoading ? <i className='fas fa-circle-notch fa-spin'></i> : <i className='fa-solid fa-circle-arrow-right'></i>}</button><br />\n                    </form>\n                </ReactIf>\n                <ReactIf condition={authstep.secondstep}>\n                    <form className='box' onSubmit={verifyAuthcode}>\n                        <p className='branding'>Lenstack Auth</p>\n                        <p className='boxtext'>Check your email address and enter auth code to continue</p>\n                        <ReactIf condition={state.newuser}>\n                            <FloatingLabel controlId='floatingName' label='Your Name'>\n                                <Form.Control type='text' placeholder='Your Name' onChange={(e) => setState({ ...state, name: e.target.value })} required autoComplete={'off'} minLength={3} maxLength={40} />\n                            </FloatingLabel>\n                        </ReactIf>\n                        <FloatingLabel controlId='floatingPassword' label='Enter Auth Code'>\n                            <Form.Control type='password' name='otp' placeholder='Enter Auth Code' onChange={(e) => setState({ ...state, otp: e.target.value })} required autoComplete={'off'} minLength={8} maxLength={8} />\n                        </FloatingLabel>\n                        <p id='alert'>{alert}</p>\n                        <button type='submit' className='mt-2 btn btnbox'>{state.newuser ? 'Set up the account' : 'Continue to the app'} {isLoading ? <i className='fas fa-circle-notch fa-spin'></i> : <i className='fa-solid fa-circle-arrow-right'></i>}</button>\n                    </form>\n                </ReactIf>\n            </ReactIf>\n        </Fragment >\n    )\n}\n\nexport default AuthPage"],"names":["useState","firststep","secondstep","authstep","setAuthStep","name","email","hash","otp","newuser","state","setState","alert","setAlert","isLoading","setLoading","navigate","useNavigate","generateAuthcode","event","preventDefault","Constants","axios","endPoints","response","data","msg","verifyAuthcode","accessToken","localStorage","setItem","Fragment","condition","hasOwnProperty","replace","to","className","onSubmit","controlId","label","autoFocus","type","placeholder","onChange","e","target","value","required","autoComplete","minLength","maxLength","id"],"sourceRoot":""}