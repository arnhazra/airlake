{"version":3,"file":"static/js/710.b87cd931.chunk.js","mappings":"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","sources":["hooks/useTransactionData.tsx","hooks/useLivePrice.tsx","pages/WalletTransactionsPage.tsx"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate } from 'react-router-dom'\nimport endPoints from '../constants/Endpoints'\nimport { toast } from 'react-hot-toast'\n\nconst useTransactionData = () => {\n    const [state, setState] = useState({ transactions: [], isLoaded: false })\n    const navigate = useNavigate()\n\n    useEffect(() => {\n        (async () => {\n            try {\n                axios.defaults.headers.common['Authorization'] = `Bearer ${localStorage.getItem('accessToken')}`\n                const response = await axios.post(endPoints.walletTransactionEndpoint)\n                setState({ ...state, transactions: response.data.transactions, isLoaded: true })\n            }\n\n            catch (error: any) {\n                if (error.response.status === 401) {\n                    localStorage.removeItem('accessToken')\n                    navigate('/')\n                }\n\n                else {\n                    setState({ ...state, isLoaded: true })\n                    toast.error('Something went wrong')\n                }\n            }\n        })()\n    }, [])\n\n    return state\n}\n\nexport default useTransactionData","import { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport endPoints from '../constants/Endpoints'\nimport { LivePriceState } from '../types/States'\nimport { toast } from 'react-hot-toast'\nimport { useNavigate } from 'react-router-dom'\n\nconst useLivePrice = () => {\n    const [state, setState] = useState<LivePriceState>({ inr: 0, usd: 0, eur: 0, isLoaded: false })\n    const navigate = useNavigate()\n\n    const getLivePrice = async () => {\n        try {\n            axios.defaults.headers.common['Authorization'] = `Bearer ${localStorage.getItem('accessToken')}`\n            const response = await axios.post(endPoints.walletLivePriceEndpoint)\n            setState({ inr: response.data.ethereum.inr, usd: response.data.ethereum.usd, eur: response.data.ethereum.eur, isLoaded: true })\n        }\n\n        catch (error: any) {\n            if (error.response.status === 401) {\n                localStorage.removeItem('accessToken')\n                navigate('/')\n            }\n\n            else {\n                setState({ inr: 0, usd: 0, eur: 0, isLoaded: true })\n                toast.error('Something went wrong')\n            }\n\n        }\n    }\n\n    useEffect(() => {\n        getLivePrice()\n        const getRealtimeData = setInterval(() => getLivePrice(), 45000)\n        return () => clearInterval(getRealtimeData)\n    }, [])\n\n    return state\n}\n\nexport default useLivePrice","import { Container, Table } from 'react-bootstrap'\r\nimport { Fragment } from 'react'\r\nimport Loading from '../components/Loading'\r\nimport ReactIf from '../components/ReactIf'\r\nimport moment from 'moment'\r\nimport endPoints from '../constants/Endpoints'\r\nimport useTransactionData from '../hooks/useTransactionData'\r\nimport useLivePrice from '../hooks/useLivePrice'\r\nimport { Link } from 'react-router-dom'\r\nimport Constants from '../constants/Constants'\r\n\r\nconst WalletTransactionsPage = () => {\r\n    const transactions = useTransactionData()\r\n    const liveprice = useLivePrice()\r\n\r\n    const transactionsToDisplay = transactions.transactions.map((tx: any) => {\r\n        return (\r\n            <tr key={tx._id}>\r\n                <td>{tx.transactionType} LST</td>\r\n                <td>{tx.lstAmount} LST</td>\r\n                <td>{tx.ethAmount} ETH</td>\r\n                <td>{moment(tx.date).format('MMM, Do YYYY, h:mm a')}</td>\r\n                <td><a href={`${endPoints.etherScanEndpoint}/${tx.txHash}`} target='_blank' rel='noopener noreferrer'>View on EtherScan</a></td>\r\n            </tr>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <Fragment>\r\n            <ReactIf condition={transactions.isLoaded && liveprice.isLoaded}>\r\n                <Container>\r\n                    <div className='jumbotron mt-4 pl-5'>\r\n                        <p className='display-4'>Wallet</p>\r\n                        <div key={'liveprice'}>\r\n                            <Table responsive hover variant='light'>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Crypto</th>\r\n                                        <th>INR</th>\r\n                                        <th>USD</th>\r\n                                        <th>EUR</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>ETH</td>\r\n                                        <td>{liveprice.inr}</td>\r\n                                        <td>{liveprice.usd}</td>\r\n                                        <td>{liveprice.eur}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>LST</td>\r\n                                        < td > {(liveprice.inr / 10000).toFixed(3)}</td>\r\n                                        <td>{(liveprice.usd / 10000).toFixed(3)}</td>\r\n                                        <td>{(liveprice.eur / 10000).toFixed(3)}</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </Table>\r\n                        </div>\r\n                        <div className='info'>\r\n                            <p className='lead'>{Constants.Info}</p>\r\n                            <p className='lead'>{Constants.Warning}</p>\r\n                            <Link to='/wallet/buy' className='btn'>Buy LST<i className='fa-solid fa-circle-arrow-right'></i></Link>\r\n                            <Link to='/wallet/sell' className='btn'>Sell LST<i className='fa-solid fa-circle-arrow-right'></i></Link>\r\n                        </div>\r\n                    </div>\r\n                    <ReactIf condition={transactions.transactions.length > 0}>\r\n                        <Table responsive hover variant='light'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Event</th>\r\n                                    <th>LST Amount</th>\r\n                                    <th>ETH Amount</th>\r\n                                    <th>Transaction Time</th>\r\n                                    <th>EtherScan Link</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {transactionsToDisplay}\r\n                            </tbody>\r\n                        </Table>\r\n                    </ReactIf>\r\n                </Container>\r\n            </ReactIf>\r\n            <ReactIf condition={!transactions.isLoaded || !liveprice.isLoaded}>\r\n                <Loading />\r\n            </ReactIf>\r\n        </Fragment >\r\n    )\r\n}\r\n\r\nexport default WalletTransactionsPage"],"names":["useState","transactions","isLoaded","state","setState","navigate","useNavigate","useEffect","axios","localStorage","getItem","endPoints","response","data","status","removeItem","toast","inr","usd","eur","getLivePrice","ethereum","getRealtimeData","setInterval","clearInterval","useTransactionData","liveprice","useLivePrice","transactionsToDisplay","map","tx","transactionType","lstAmount","ethAmount","moment","date","format","href","txHash","target","rel","_id","Fragment","ReactIf","condition","Container","className","Table","responsive","hover","variant","toFixed","Constants","to","length","Loading"],"sourceRoot":""}